"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Event implements Node {
  """Relay ID"""
  id: ID!
  title: String!
  time: DateTime!
  image: String!
  location: Location!
  availableSeats(first: Int, last: Int, before: SeatWhereUniqueInput, after: SeatWhereUniqueInput): [Seat!]!
}

type EventConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [EventEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input EventConnectionWhereInput {
  keywords: String
  time: DateTime
  city: String
  state: String
  country: String
}

type EventEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Event
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Location implements Node {
  """Relay ID"""
  id: ID!
  city: String!
  state: String!
  country: String!
}

interface Node {
  """Relay ID"""
  id: ID!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String

  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String
}

type Query {
  eventConnection(
    where: EventConnectionWhereInput

    """Returns the first n elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the last n elements from the list."""
    last: Int

    """Returns the elements in the list that come before the specified cursor"""
    before: String
  ): EventConnection
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node!]
}

type Seat implements Node {
  """Relay ID"""
  id: ID!
}

input SeatWhereUniqueInput {
  id: String
}

